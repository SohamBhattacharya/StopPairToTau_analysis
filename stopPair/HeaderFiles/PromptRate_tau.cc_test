# include <iostream>
# include <fstream>
# include <map>
# include <string>
# include <typeinfo>
# include <vector>

# include <CLHEP/Vector/LorentzVector.h>

# include <TFile.h>
# include <TH1F.h>
# include <TTable.h>
# include <TTree.h>

# include "lester_mt2_bisect_mod.h"

# include "Common.h"
# include "CustomInfo_mc.h"
# include "CustomInfo_data.h"
# include "Output_RECO.h"
# include "PromptRate_tau.h"


namespace PromptRate_tau
{
    void initialize(
        std::string process,
        std::string dir,
        std::string otherInfoDir,
        std::string sourceFileName,
        bool isMC
    )
    {
        initialize(
            process,
            dir,
            otherInfoDir,
            sourceFileName,
            isMC,
            {}
        );
    }
    
    
    void initialize(
        std::string process,
        std::string dir,
        std::string otherInfoDir,
        std::string sourceFileName,
        bool isMC,
        std::vector <double> v_eventWeight_nJetBin
    )
    {
        //char sourceFileName[Common::str_len];
        //sprintf(sourceFileName, "../sourceFiles/%s/%s_custom.txt", process.c_str(), process.c_str());
        
        std::ifstream sourceFileList;
        sourceFileList.open(sourceFileName.c_str());
        
        std::string inFile;
        
        char command[Common::str_len];
        
        char outDir[Common::str_len];
        //sprintf(outDir, "output_tauPromptRate_tau/%s", dir.c_str());
        sprintf(outDir, "%s", dir.c_str());
        
        sprintf(command, "mkdir -p %s", outDir);
        system(command);
        
        
        char treePath_gen[Common::str_len];
        char treePath_reco[Common::str_len];
        
        sprintf(treePath_gen, "miniaodsim2custom/gen");
        
        if(isMC)
        {
            sprintf(treePath_reco, "miniaodsim2custom/reco");
        }
        
        else
        {
            sprintf(treePath_reco, "miniaod2custom/reco");
        }
        
        asymm_mt2_lester_bisect::disableCopyrightMessage();
        
        char fileName_pileUp_mc[Common::str_len];
        sprintf(fileName_pileUp_mc, "%s/output_pileUp/%s/custom_all_pileUp.root", otherInfoDir.c_str(), process.c_str());
        char histName_pileUp_mc[Common::str_len];
        sprintf(histName_pileUp_mc, "pileup");
        
        char fileName_pileUp_data[Common::str_len];
        //sprintf(fileName_pileUp_data, "../tauTau_data/output_pileUp/Tau/pileUpDistribution_2016H.root");
        //sprintf(fileName_pileUp_data, "../resources/pileup/pileUpDistribution_Cert_271036-284044_13TeV_PromptReco_Collisions16_JSON.root");
        sprintf(fileName_pileUp_data, "resources/pileup/pileUpDistribution_Cert_271036-284044_13TeV_PromptReco_Collisions16_JSON.root");
        char histName_pileUp_data[Common::str_len];
        sprintf(histName_pileUp_data, "pileup");
        
        char fileName_bTaggingEfficiency[Common::str_len];
        sprintf(fileName_bTaggingEfficiency, "%s/output_bTaggingEfficiency/%s/bTaggingEfficiency.root", otherInfoDir.c_str(), process.c_str());
        //BTagCalibration bTagCalib("CSVv2_Moriond17_B_H", "../resources/bTagging/CSVv2_Moriond17_B_H.csv");
        BTagCalibration bTagCalib("CSVv2_Moriond17_B_H", "resources/bTagging/CSVv2_Moriond17_B_H.csv");
        
        // Remember to delete
        TauEfficiencyAndSF::TauEfficiencyAndSF *tauEffSFobject = new TauEfficiencyAndSF::TauEfficiencyAndSF(
            //"../DYJetsToLL_mc/output_tauIdIsoEfficiency/DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_tauIdIsoEfficiency/custom_all_tauIdIsoEfficiency.root",
            //"DYJetsToLL_mc/output_tauIdIsoEfficiency/DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_tauIdIsoEfficiency/custom_all_tauIdIsoEfficiency.root",
            "ttbar_mc/output_tauIdIsoEfficiency/TT_TuneCUETP8M2T4_13TeV-powheg-pythia8_tauIdIsoEfficiency/custom_all_tauIdIsoEfficiency.root",
            "TightIsolationMVArun2v1DBdR03oldDMwLT_againstElectronLooseMVA6_againstMuonLoose3/tau_genMatched_pT_vs_eta_reco",
            "TightIsolationMVArun2v1DBdR03oldDMwLT_againstElectronLooseMVA6_againstMuonLoose3/tau_vis_pT_vs_eta_gen"
        );
        
        int n = 0;
        while(std::getline(sourceFileList, inFile))
        {
            //n++; if(n > 1) break;
            
            char fileNameStripped[Common::str_len];
            sprintf(fileNameStripped, "%s", (inFile.substr(inFile.rfind("/")+1, inFile.rfind(".root")-inFile.rfind("/")-1)).c_str());
            
            char outFile[Common::str_len];
            sprintf(outFile, "%s/%s_fakeRate_tauTau.root", outDir, fileNameStripped);
            fflush(stdout);
            
            printf("Analyzing... \n");
            printf("Input: %s \n", inFile.c_str());
            printf("Output: %s \n", outFile);
            printf("\n");
            
            std::vector <const char*> v_object_mc_gen = {
                "genParam", "el", "mu", "tau_vis", "b", "jet", "MET"
            };
            
            std::vector <const char*> v_object_reco;
            
            if(isMC)
            {
                v_object_reco = { \
                    "PU", "el", "mu", "tau", "jet", "MET", "trigger"};
            }
            
            else
            {
                v_object_reco = { \
                    "el", "mu", "tau", "jet", "MET", "trigger"};
            }
            
            CustomInfo_mc::Info *input_mc;
            CustomInfo_data::Info *input_data;
            
            if(isMC)
            {
                input_mc = new CustomInfo_mc::Info(
                    inFile.c_str(),
                    treePath_gen, v_object_mc_gen,
                    treePath_reco, v_object_reco,
                    "read",
                    fileName_pileUp_mc, histName_pileUp_mc,
                    fileName_pileUp_data, histName_pileUp_data
                );
            }
            
            else
            {
                input_data = new CustomInfo_data::Info(
                    inFile.c_str(),
                    treePath_reco, v_object_reco,
                    "read"
                );
            }
            
            // RECO histograms
            std::vector <const char*> v_outputOption_reco;
            
            if(isMC)
            {
                v_outputOption_reco = { \
                    "PU", "tau", "tauTau", "jet", "b", "MET"};
            }
            
            else
            {
                v_outputOption_reco = { \
                    "tau", "tauTau", "jet", "b", "MET"};
            }
            
            
            Output_RECO::Output *output_reco_loose_dR03 = new Output_RECO::Output(v_outputOption_reco, "loose_dR03");
            Output_RECO::Output *output_reco_tight_dR03 = new Output_RECO::Output(v_outputOption_reco, "tight_dR03");
            Output_RECO::Output *output_reco_VTight_dR03 = new Output_RECO::Output(v_outputOption_reco, "VTight_dR03");
            
            
            // Output root file
            TFile *output_analyzed;
            output_analyzed = TFile::Open(outFile, "RECREATE");
            
           
           // Analyze
            if(isMC)
            {
                // dR03
                PromptRate_tau::analyze_reco(
                    input_mc,
                    output_reco_loose_dR03,
                    "loose", input_mc->v_tau_byLooseIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
                
                PromptRate_tau::analyze_reco(
                    input_mc,
                    output_reco_tight_dR03,
                    "tight", input_mc->v_tau_byTightIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
                
                PromptRate_tau::analyze_reco(
                    input_mc,
                    output_reco_VTight_dR03,
                    "vtight", input_mc->v_tau_byVTightIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
            }
            
            else
            {
                // dR03
                PromptRate_tau::analyze_reco(
                    input_data,
                    output_reco_loose_dR03,
                    "loose", input_data->v_tau_byLooseIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
                
                PromptRate_tau::analyze_reco(
                    input_data,
                    output_reco_tight_dR03,
                    "tight", input_data->v_tau_byTightIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
                
                PromptRate_tau::analyze_reco(
                    input_data,
                    output_reco_VTight_dR03,
                    "vtight", input_data->v_tau_byVTightIsolationMVArun2v1DBdR03oldDMwLT_reco,
                    isMC,
                    &bTagCalib,
                    fileName_bTaggingEfficiency,
                    tauEffSFobject,
                    v_eventWeight_nJetBin
                );
                
                printf("\n");
            }
            
            printf("\n\n");
            
            
            // Write output
            std::string dirName;
            
            dirName = "loose_dR03";
            output_analyzed->mkdir(dirName.c_str());
            output_analyzed->cd(dirName.c_str());
            output_reco_loose_dR03->writeData();
            
            dirName = "tight_dR03";
            output_analyzed->mkdir(dirName.c_str());
            output_analyzed->cd(dirName.c_str());
            output_reco_tight_dR03->writeData();
            
            dirName = "VTight_dR03";
            output_analyzed->mkdir(dirName.c_str());
            output_analyzed->cd(dirName.c_str());
            output_reco_VTight_dR03->writeData();
            
            
            // Release memory
            output_reco_loose_dR03->freeMemory();
            output_reco_tight_dR03->freeMemory();
            output_reco_VTight_dR03->freeMemory();
            
            
            delete output_reco_loose_dR03;
            delete output_reco_tight_dR03;
            delete output_reco_VTight_dR03;
            
            
            delete output_analyzed;
            
            if(isMC)
            {
                input_mc->freeMemory();
                delete input_mc;
            }
            
            else
            {
                input_data->freeMemory();
                delete input_data;
            }
        }
        
        delete tauEffSFobject;
    }

}
